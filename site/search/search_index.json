{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QFlex | Quick &amp; Flexible Computer Architecture Simulation","text":"<p>State-of-the-art modeling tools for the computer architecture community. The QFlex project targets quick, accurate, and flexible simulation of multi-node computer systems.</p> <p></p>"},{"location":"#download-qflex","title":"Download QFlex","text":"<ul> <li>QFlex\u2019s source code is hosted on GitHub: parsa-epfl/qflex </li> <li>QFlex is available both as a command-line tool (CLI) and as a Docker image, making setup and integration straightforward.  </li> <li>For more details on installation, usage, and configuration, visit the CLI documentation.</li> </ul>"},{"location":"#about-qflex","title":"About QFlex","text":"<p>Computer system designers traditionally rely on fast emulation and full-system simulation to instrument designs, develop system software, model hardware components, and measure metrics of interest. In recent years, post-Moore platforms have introduced more heterogeneity (e.g. accelerators), demanding integrated hardware/software co-design.</p> <p>Effective integration requires open tools to allow fast instrumentation of applications, full-system models for network and storage controllers, and support for multi-node systems. Full-system server instrumentation needs several orders of magnitude in speed to be practical.</p> <p>QFlex is a family of full-system instrumentation tools built on top of QEMU, currently supporting ARM and RISC-V ISAs. It includes:</p> <ul> <li>A trace-based model for quickly instrumenting existing QEMU images  </li> <li>Timing models to simulate multicore CPU microarchitecture  </li> <li>Support for multi-node simulation and system stacks</li> </ul> <p>For more details, modules, and citations, see the project documentation and the GitHub repo.</p>"},{"location":"#news-releases","title":"News / Releases","text":""},{"location":"#qflex-v20-released","title":"QFlex v2.0 Released","text":"<p>Released March 20, 2020. QFlex continues to support trace-based simulation and timing models. (See release notes on GitHub.)  </p>"},{"location":"#qflex-v10-released","title":"QFlex v1.0 Released","text":"<p>Released April 1, 2017. QFlex enabled full-system microarchitectural simulation of multicores running unmodified applications. A CloudSuite workload image was provided. (zenodo.org)  </p> <p>We encourage users to watch the GitHub repository and file issues for enhancements or bug fixes.</p>"},{"location":"#related-projects-links","title":"Related Projects &amp; Links","text":"<ul> <li>Flexus (cycle-accurate simulator used in QFlex): parsa-epfl/flexus </li> <li>libqflex (API between QEMU and Flexus): parsa-epfl/libqflex </li> <li>EPFL\u2019s EcoCloud page on QFlex: EcoCloud \u2013 QFlex </li> </ul>"},{"location":"#citation-licensing-acknowledgments","title":"Citation / Licensing &amp; Acknowledgments","text":"<ul> <li>QFlex is open source under licenses as described in the GitHub repository.  </li> <li>The project relies on QEMU, Boost, Conan, and other components, each governed by their own licenses.  </li> </ul> <p>\u00a9 2025 EPFL PARSA \u2013 1015 Lausanne, Switzerland \u2013 tel. +41 21 693 1395 \u2013 All Rights Reserved</p>"},{"location":"reference/docker/","title":"Docker","text":""},{"location":"reference/docker/#dep","title":"./dep","text":"<p>A CLI tool to manage QFlex dependancies and images. (suggest running ./dep --show-completion &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc to enable autocompletions)</p> <p>Usage:</p> <pre><code>./dep [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n</code></pre>"},{"location":"reference/docker/#build-docker","title":"build-docker","text":"<p>Build the Docker image for QFlex. Use --debug to build a debug version. Useful for development and testing without installing dependencies locally.</p> <p>Usage:</p> <pre><code>./dep build-docker [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --debug / --no-debug          Build the Docker image in debug mode.\n                                \\[default: no-debug]\n  --worm / --no-worm            Build the Docker image with WORM support.\n                                Experimental  \\[default: no-worm]\n  --worm-only / --no-worm-only  Re-build only the WORMCache component.\n                                \\[default: no-worm-only]\n  --push / --no-push            Push the built image to github container\n                                registery. Requires authentication.\n                                \\[default: no-push]\n  --help                        Show this message and exit.\n</code></pre>"},{"location":"reference/docker/#start-docker","title":"start-docker","text":"<p>Start a Docker container with the QFlex environment.  Useful for development and testing without installing dependencies locally.</p> <p>Usage:</p> <pre><code>./dep start-docker [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --mounting-folder TEXT  Folder to mount for files.  \\[required]\n  --debug / --no-debug    Start the Docker container in debug mode.\n                          \\[default: no-debug]\n  --worm / --no-worm      Build the Docker image with WORM support.\n                          Experimental  \\[default: no-worm]\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/","title":"./qflex","text":"<p>A CLI tool to manage QFlex operations. (suggest running ./qflex --show-completion &gt;&gt; ~/.bashrc &amp;&amp; source ~/.bashrc to enable autocompletions)</p> <p>Usage:</p> <pre><code>./qflex [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --install-completion  Install completion for the current shell.\n  --show-completion     Show completion for the current shell, to copy it or\n                        customize the installation.\n  --help                Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/#boot","title":"boot","text":"<p>Boot a QEMU virtual machine with specified parameters. Once booted, you can log in with username 'root' and no password. After installing your desired packages and making changes, you can save the state with Ctrl+A, then C to create a snapshot named 'base' by savevm base,  then exit with Ctrl+C, then quit. This is the second step to create the images for an experiment, with all the necessary packages installed.</p> <p>Usage:</p> <pre><code>./qflex boot [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --core-count INTEGER            Number of CPU cores for the VM.  \\[required]\n  --double-cores / --no-double-cores\n                                  Double the number of CPU cores for the\n                                  client.  \\[required]\n  --quantum-size-ns INTEGER       Quantum size for the simulator in\n                                  nanoseconds.  \\[required]\n  --llc-size-per-tile-mb INTEGER  LLC size per tile in MB.  \\[required]\n  --parallel / --no-parallel      Whether the simulation is parallel or not.\n                                  \\[required]\n  --network TEXT                  Network mode, either user or none\n                                  \\[required]\n  --memory-gb INTEGER             Memory size for the VM in GB.  \\[required]\n  --host-name TEXT                Host name, used to create initial ipns file\n                                  \\[required]\n  --workload-name TEXT            Workload name  \\[required]\n  --population-seconds FLOAT      Population size for the workload in seconds.\n                                  \\[required]\n  --sample-size INTEGER           Sample size for the workload.  \\[required]\n  --consolidated / --no-consolidated\n                                  Whether the workload is consolidated or not.\n                                  \\[required]\n  --primary-ipc FLOAT             Target IPC for primary workload.\n                                  \\[required]\n  --primary-core-start INTEGER    Starting core for primary workload.\n                                  \\[required]\n  --secondary-core-start INTEGER  Starting core for secondary workload. Only\n                                  used if consolidated is True.  \\[default:\n                                  -1]\n  --secondary-ipc FLOAT           Target IPC for secondary workload. Only used\n                                  if consolidated is True.  \\[default: 0.0]\n  --phantom-cpu-ipc FLOAT         Target IPC for phantom CPU. This is used for\n                                  the client in the same node. Only used in\n                                  double core mode.  \\[default: -1.0]\n  --experiment-name TEXT          Name of the experiment. Used for organizing\n                                  output files.  \\[default: default-\n                                  experiment]\n  --image-name TEXT               Name of the image file to load.  \\[default:\n                                  root.qcow2]\n  --image-folder TEXT             Folder where images are stored.  \\[default:\n                                  ./images]\n  --unique / --no-unique          Whether to keep the experiment folder unique\n                                  by adding a timestamp.  \\[default: unique]\n  --use-image-directly / --no-use-image-directly\n                                  Whether to use the image directly from the\n                                  image folder or copy it to the experiment\n                                  folder.  \\[default: no-use-image-directly]\n  --loadvm-name TEXT              Name of the loadvm to use in QEMU, optional\n  --working-directory TEXT        Working directory where the experiment\n                                  folders will be created.  \\[default: .]\n  --check-period-quantum-coeff INTEGER\n                                  Coefficient to determine the check period\n                                  based on quantum size. The value multiplied\n                                  by quantum size to get check period.\n                                  \\[default: 53]\n  --use-cd-rom / --no-use-cd-rom  Whether to use a CD-ROM for initial setup.\n                                  \\[default: no-use-cd-rom]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/#create-base-image","title":"create-base-image","text":"<p>creates a base image for qemu using alpine in the images folder in root, can be used in next steps</p> <p>Usage:</p> <pre><code>./qflex create-base-image [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --image-folder TEXT      Where to create the image  \\[default: .]\n  --image-name TEXT        Name of the base image file to create.  \\[default:\n                           root.qcow2]\n  --image-size-gb INTEGER  Size of the base image in GB.  \\[default: 8]\n  --help                   Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/#fw","title":"fw","text":"<p>This command performs functional warming of the simulator. Functional warming creates the checkpoints that will be used during the detailed simulation phase.</p> <p>Usage:</p> <pre><code>./qflex fw [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --core-count INTEGER            Number of CPU cores for the VM.  \\[required]\n  --double-cores / --no-double-cores\n                                  Double the number of CPU cores for the\n                                  client.  \\[required]\n  --quantum-size-ns INTEGER       Quantum size for the simulator in\n                                  nanoseconds.  \\[required]\n  --llc-size-per-tile-mb INTEGER  LLC size per tile in MB.  \\[required]\n  --parallel / --no-parallel      Whether the simulation is parallel or not.\n                                  \\[required]\n  --network TEXT                  Network mode, either user or none\n                                  \\[required]\n  --memory-gb INTEGER             Memory size for the VM in GB.  \\[required]\n  --host-name TEXT                Host name, used to create initial ipns file\n                                  \\[required]\n  --workload-name TEXT            Workload name  \\[required]\n  --population-seconds FLOAT      Population size for the workload in seconds.\n                                  \\[required]\n  --sample-size INTEGER           Sample size for the workload.  \\[required]\n  --consolidated / --no-consolidated\n                                  Whether the workload is consolidated or not.\n                                  \\[required]\n  --primary-ipc FLOAT             Target IPC for primary workload.\n                                  \\[required]\n  --primary-core-start INTEGER    Starting core for primary workload.\n                                  \\[required]\n  --secondary-core-start INTEGER  Starting core for secondary workload. Only\n                                  used if consolidated is True.  \\[default:\n                                  -1]\n  --secondary-ipc FLOAT           Target IPC for secondary workload. Only used\n                                  if consolidated is True.  \\[default: 0.0]\n  --phantom-cpu-ipc FLOAT         Target IPC for phantom CPU. This is used for\n                                  the client in the same node. Only used in\n                                  double core mode.  \\[default: -1.0]\n  --experiment-name TEXT          Name of the experiment. Used for organizing\n                                  output files.  \\[default: default-\n                                  experiment]\n  --image-name TEXT               Name of the image file to load.  \\[default:\n                                  root.qcow2]\n  --image-folder TEXT             Folder where images are stored.  \\[default:\n                                  ./images]\n  --unique / --no-unique          Whether to keep the experiment folder unique\n                                  by adding a timestamp.  \\[default: unique]\n  --use-image-directly / --no-use-image-directly\n                                  Whether to use the image directly from the\n                                  image folder or copy it to the experiment\n                                  folder.  \\[default: no-use-image-directly]\n  --loadvm-name TEXT              Name of the loadvm to use in QEMU, optional\n  --working-directory TEXT        Working directory where the experiment\n                                  folders will be created.  \\[default: .]\n  --check-period-quantum-coeff INTEGER\n                                  Coefficient to determine the check period\n                                  based on quantum size. The value multiplied\n                                  by quantum size to get check period.\n                                  \\[default: 53]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/#initialize","title":"initialize","text":"<p>This command initializes the long-term microarchitectural state of the simulator such as caches and TLBs. This is done before functional warming starts.</p> <p>Usage:</p> <pre><code>./qflex initialize [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --core-count INTEGER            Number of CPU cores for the VM.  \\[required]\n  --double-cores / --no-double-cores\n                                  Double the number of CPU cores for the\n                                  client.  \\[required]\n  --quantum-size-ns INTEGER       Quantum size for the simulator in\n                                  nanoseconds.  \\[required]\n  --llc-size-per-tile-mb INTEGER  LLC size per tile in MB.  \\[required]\n  --parallel / --no-parallel      Whether the simulation is parallel or not.\n                                  \\[required]\n  --network TEXT                  Network mode, either user or none\n                                  \\[required]\n  --memory-gb INTEGER             Memory size for the VM in GB.  \\[required]\n  --host-name TEXT                Host name, used to create initial ipns file\n                                  \\[required]\n  --workload-name TEXT            Workload name  \\[required]\n  --population-seconds FLOAT      Population size for the workload in seconds.\n                                  \\[required]\n  --sample-size INTEGER           Sample size for the workload.  \\[required]\n  --consolidated / --no-consolidated\n                                  Whether the workload is consolidated or not.\n                                  \\[required]\n  --primary-ipc FLOAT             Target IPC for primary workload.\n                                  \\[required]\n  --primary-core-start INTEGER    Starting core for primary workload.\n                                  \\[required]\n  --secondary-core-start INTEGER  Starting core for secondary workload. Only\n                                  used if consolidated is True.  \\[default:\n                                  -1]\n  --secondary-ipc FLOAT           Target IPC for secondary workload. Only used\n                                  if consolidated is True.  \\[default: 0.0]\n  --phantom-cpu-ipc FLOAT         Target IPC for phantom CPU. This is used for\n                                  the client in the same node. Only used in\n                                  double core mode.  \\[default: -1.0]\n  --experiment-name TEXT          Name of the experiment. Used for organizing\n                                  output files.  \\[default: default-\n                                  experiment]\n  --image-name TEXT               Name of the image file to load.  \\[default:\n                                  root.qcow2]\n  --image-folder TEXT             Folder where images are stored.  \\[default:\n                                  ./images]\n  --unique / --no-unique          Whether to keep the experiment folder unique\n                                  by adding a timestamp.  \\[default: unique]\n  --use-image-directly / --no-use-image-directly\n                                  Whether to use the image directly from the\n                                  image folder or copy it to the experiment\n                                  folder.  \\[default: no-use-image-directly]\n  --loadvm-name TEXT              Name of the loadvm to use in QEMU, optional\n  --working-directory TEXT        Working directory where the experiment\n                                  folders will be created.  \\[default: .]\n  --check-period-quantum-coeff INTEGER\n                                  Coefficient to determine the check period\n                                  based on quantum size. The value multiplied\n                                  by quantum size to get check period.\n                                  \\[default: 53]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/#load","title":"load","text":"<p>Load a QEMU virtual machine from a snapshot with specified parameters. This is done to warm up long-term microarchitectural state before functional warming starts. This is the third step, to prepare for functional warming.</p> <p>Usage:</p> <pre><code>./qflex load [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --core-count INTEGER            Number of CPU cores for the VM.  \\[required]\n  --double-cores / --no-double-cores\n                                  Double the number of CPU cores for the\n                                  client.  \\[required]\n  --quantum-size-ns INTEGER       Quantum size for the simulator in\n                                  nanoseconds.  \\[required]\n  --llc-size-per-tile-mb INTEGER  LLC size per tile in MB.  \\[required]\n  --parallel / --no-parallel      Whether the simulation is parallel or not.\n                                  \\[required]\n  --network TEXT                  Network mode, either user or none\n                                  \\[required]\n  --memory-gb INTEGER             Memory size for the VM in GB.  \\[required]\n  --host-name TEXT                Host name, used to create initial ipns file\n                                  \\[required]\n  --workload-name TEXT            Workload name  \\[required]\n  --population-seconds FLOAT      Population size for the workload in seconds.\n                                  \\[required]\n  --sample-size INTEGER           Sample size for the workload.  \\[required]\n  --consolidated / --no-consolidated\n                                  Whether the workload is consolidated or not.\n                                  \\[required]\n  --primary-ipc FLOAT             Target IPC for primary workload.\n                                  \\[required]\n  --primary-core-start INTEGER    Starting core for primary workload.\n                                  \\[required]\n  --secondary-core-start INTEGER  Starting core for secondary workload. Only\n                                  used if consolidated is True.  \\[default:\n                                  -1]\n  --secondary-ipc FLOAT           Target IPC for secondary workload. Only used\n                                  if consolidated is True.  \\[default: 0.0]\n  --phantom-cpu-ipc FLOAT         Target IPC for phantom CPU. This is used for\n                                  the client in the same node. Only used in\n                                  double core mode.  \\[default: -1.0]\n  --experiment-name TEXT          Name of the experiment. Used for organizing\n                                  output files.  \\[default: default-\n                                  experiment]\n  --image-name TEXT               Name of the image file to load.  \\[default:\n                                  root.qcow2]\n  --image-folder TEXT             Folder where images are stored.  \\[default:\n                                  ./images]\n  --unique / --no-unique          Whether to keep the experiment folder unique\n                                  by adding a timestamp.  \\[default: unique]\n  --use-image-directly / --no-use-image-directly\n                                  Whether to use the image directly from the\n                                  image folder or copy it to the experiment\n                                  folder.  \\[default: no-use-image-directly]\n  --loadvm-name TEXT              Name of the loadvm to use in QEMU, optional\n  --working-directory TEXT        Working directory where the experiment\n                                  folders will be created.  \\[default: .]\n  --check-period-quantum-coeff INTEGER\n                                  Coefficient to determine the check period\n                                  based on quantum size. The value multiplied\n                                  by quantum size to get check period.\n                                  \\[default: 53]\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"reference/qflex/#partition","title":"partition","text":"<p>This command partitions the functional warmup checkpoints into smaller segments for detailed (timing) simulation. It also generates the necessary scripts to run the detailed simulations.</p> <p>Usage:</p> <pre><code>./qflex partition [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --experiment-name TEXT       Name of the experiment to partition the\n                               checkpoints for.  \\[default:\n                               default_experiment]\n  --working-directory TEXT     Working directory where the experiment folders\n                               are located.  \\[default: .]\n  --partition-count INTEGER    Number of partitions to create.  \\[default: 16]\n  --warming-ratio INTEGER      Ratio of warming instructions before\n                               measurement.  \\[default: 2]\n  --measurement-ratio INTEGER  Ratio of timing measurement instructions.\n                               \\[default: 1]\n  --help                       Show this message and exit.\n</code></pre>"}]}