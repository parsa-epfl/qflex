#!/usr/bin/env python

import typer
from typing import Annotated
from commands.createimage import CreateImage
from commands.boot import Boot
from commands.docker import DockerStarter, DockerBuild
from commands.config import create_experiment_context, ExperimentContext
from commands.load import Load
from typer_inputs.config import ExperimentContextTyper
from typer_inputs.config_wrapper import data_class_wrap

app = typer.Typer(
    name="qflex cli",
    help="A CLI tool to manage QFlex operations. (suggest running ./qflex --show-completion >> ~/.bashrc && source ~/.bashrc to enable autocompletions)",
)

# TODO remove worm option once fully released and integrated
@app.command()
def build_docker(
    debug: Annotated[bool, typer.Option(help="Build the Docker image in debug mode.")] = False,
    worm: Annotated[bool, typer.Option(help="Build the Docker image with WORM support. Experimental")] = False,
):
    """
    Build the Docker image for QFlex. Use --debug to build a debug version.
    Useful for development and testing without installing dependencies locally.
    """
    docker_build_executor = DockerBuild(debug=debug, worm=worm)
    docker_build_executor.execute(to_stdio=True, run_in_background=False)


@app.command()
def start_docker(
    image_folder: Annotated[str, typer.Option(help="Folder where images are stored.")],
    experiment_name: Annotated[str, typer.Option(help="Name of the experiment. Used for organizing output files.")] = 'default_experiment',
    debug: Annotated[bool, typer.Option(help="Start the Docker container in debug mode.")] = False, 
    worm: Annotated[bool, typer.Option(help="Build the Docker image with WORM support. Experimental")] = False,
):
    """
    Start a Docker container with the QFlex environment. 
    Useful for development and testing without installing dependencies locally.
    """
    docker_executor = DockerStarter(image_folder=image_folder, debug=debug, worm=worm, experiment_name=experiment_name)
    docker_executor.execute(to_stdio=True, run_in_background=False)

# TODO bring in the build scripts here as well


@app.command()
def create_base_image(
    image_name: Annotated[str,typer.Option(
        help="Name of the base image file to create."
    )] = "base.qcow2",
    image_size_gb: Annotated[int, typer.Option(help="Size of the base image in GB.")] = 8 
):
    """
    Create a base image for QEMU. 
    This is the first step to create the images for an experiment.
    """ 
    create_image_executor = CreateImage(image_name=image_name, size_gb=image_size_gb)
    create_image_executor.execute(to_stdio=True, run_in_background=False)

@app.command()
@data_class_wrap(ExperimentContextTyper("experiment_context"))
def boot(
    experiment_context: ExperimentContext,
):
    """
    Boot a QEMU virtual machine with specified parameters.
    Once booted, you can log in with username 'root' and no password.
    After installing your desired packages and making changes,
    you can save the state with Ctrl+A, then C to create a snapshot named 'base' by savevm base, 
    then exit with Ctrl+C, then quit.
    This is the second step to create the images for an experiment, with all the necessary packages installed.
    """
    boot_executor = Boot(
        experimnt_context=experiment_context
    )
    boot_executor.execute(to_stdio=True, run_in_background=False)

@app.command()
@data_class_wrap(ExperimentContextTyper("experiment_context"))
def load(
    experiment_context: ExperimentContext,
):
    """
    Load a QEMU virtual machine from a snapshot with specified parameters.
    This is done to warm up long-term microarchitectural state before functional warming starts.
    This is the third step, to prepare for functional warming.
    """
    print("Experiment Context:")
    print(experiment_context)
    return
    # load_executor = Load(
    #     experiment_context=experiment_context
    # )
    # load_executor.execute(to_stdio=True, run_in_background=False)


if __name__ == "__main__":
    app()